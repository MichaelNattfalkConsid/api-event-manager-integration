!function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=207)}({207:function(t,e,n){"use strict";n.r(e);var o;(o=o||{}).Admin=o.Admin||{},o.Admin.AcceptDeny=function(t){function e(){t(function(){this.handleEvents()}.bind(this))}return e.prototype.changeAccepted=function(e,n){t.ajax({url:eventintegration.ajaxurl,type:"post",data:{action:"accept_or_deny",value:e,postId:n},beforeSend:function(o){var a=t("#post-"+n);1==e?(a.find(".deny").removeClass("hidden"),a.find(".accept").addClass("hidden")):0==e&&(a.find(".deny").addClass("hidden"),a.find(".accept").removeClass("hidden"))}})},e.prototype.handleEvents=function(){t(document).on("click",".accept",function(n){n.preventDefault();var o=t(n.target).attr("postid");e.prototype.changeAccepted(1,o)}.bind(this)),t(document).on("click",".deny",function(n){n.preventDefault();var o=t(n.target).attr("postid");e.prototype.changeAccepted(0,o)}.bind(this))},new e}(jQuery);function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}(function(){var t=t||{};t.Admin=t.Admin||{},t.Admin.DrawMap=function(t){var e,n=eventIntegrationAdmin.options.areaCoordinates;function o(){t(function(){"object"===("undefined"==typeof google?"undefined":a(google))&&"object"===a(google.maps)&&"event_page_event-options"===pagenow&&(this.init(),this.handleEvents())}.bind(this))}return o.prototype.init=function(){var t=new google.maps.Map(document.getElementById("draw-map-area"),{zoom:13,center:{lat:56.04673,lng:12.69437},disableDefaultUI:!0,zoomControl:!0}),o={strokeWeight:2,fillOpacity:.45,fillColor:"#1e90ff",strokeColor:"#0480FF"};if(n){o.paths=n,e=new google.maps.Polygon(o);for(var a=new google.maps.LatLngBounds,r=0;r<n.length;r++)a.extend(n[r]);t.fitBounds(a)}else e=new google.maps.drawing.DrawingManager({drawingMode:google.maps.drawing.OverlayType.POLYGON,drawingControl:!0,drawingControlOptions:{position:google.maps.ControlPosition.TOP_CENTER,drawingModes:["polygon"]},polygonOptions:o});e.setMap(t),e.addListener("overlaycomplete",function(t){this.polygonComplete(t)}.bind(this))},o.prototype.polygonComplete=function(n){n.overlay;var o=n.overlay.getPath(),a=[];if(o.length>8)return this.clearMap(),t("#clear-draw-map").after('<div class="notice error"><p>Exceeded maximum amount of 8 points. Please try again.</p></div>'),void t(".notice",drawDiv).delay(3e3).fadeOut();for(var r=0;r<o.length;r++){var i=o.getAt(r);a.push({lat:i.lat(),lng:i.lng()})}this.saveDrawOptions(a),n.type!=google.maps.drawing.OverlayType.MARKER&&(e.setDrawingMode(null),e.setOptions({drawingControl:!1}))},o.prototype.saveDrawOptions=function(e){t.ajax({url:eventintegration.ajaxurl,type:"post",dataType:"json",data:{action:"save_draw_points",coordinates:e},error:function(t){console.log(t)}})},o.prototype.clearMap=function(){n=null,this.init()},o.prototype.handleEvents=function(){document.getElementById("clear-draw-map").addEventListener("click",function(t){t.preventDefault(),this.clearMap()}.bind(this))},new o}(jQuery)})(),function(){var t=t||{};t.loading=!1,t.data={action:"import_events",value:""},t.timerId=null,jQuery(document).ready((function(e){e("#importevents").click((function(){if(!t.loadingOccasions){t.loadingOccasions=!0;var n=e(this),o=function(t){return{bgColor:t.css("background-color"),textColor:t.css("color"),borderColor:t.css("border-color"),textShadow:t.css("text-shadow"),boxShadow:t.css("box-shadow"),width:t.css("width"),text:t.text()}}(n);!function(e,n){e.fadeOut(500,(function(){var o=[eventIntegrationAdmin.loading+"&nbsp;&nbsp;&nbsp;",eventIntegrationAdmin.loading+".&nbsp;&nbsp;",eventIntegrationAdmin.loading+"..&nbsp;",eventIntegrationAdmin.loading+"..."];e.css("background-color","rgb(51, 197, 255)"),e.css("border-color","rgb(0, 164, 230)"),e.css("color","white"),e.css("text-shadow","0 -1px 1px rgb(0, 164, 230),1px 0 1px rgb(0, 164, 230),0 1px 1px rgb(0, 164, 230),-1px 0 1px rgb(0, 164, 230)"),e.css("box-shadow","none"),e.css("width","85px"),e.html(o[0]),e.fadeIn(500);var a=1;t.timerId=setInterval((function(){a>3&&(a=0),e.html(o[a]),++a}),500),null!=n&&n()}))}(n,(function(){t.data.value=n.attr("id"),jQuery.post(ajaxurl,t.data,(function(e){t.loadingOccasions=!1,function(e,n){e.fadeOut(500,(function(){e.css("background-color",n.bgColor),e.css("color",n.textColor),e.css("border-color",n.borderColor),e.css("text-shadow",n.textShadow),e.css("box-shadow",n.boxShadow),e.css("width",n.width),e.text(n.text),e.fadeIn(500),clearTimeout(t.timerId)}))}(n,o),location.reload()}))}))}}))}))}(),function(){var t=t||{};t.Admin=t.Admin||{},t.Admin.Oauth=function(t){function e(){t(function(){t(".oauth-access").addClass("hidden"),this.handleEvents()}.bind(this))}return e.prototype.requestOauth=function(e,n){t.ajax({url:eventintegration.ajaxurl,type:"post",dataType:"json",data:{action:"request_oauth",client:e,secret:n},success:function(e){e.success?(t(".error").addClass("hidden"),t(".updated").removeClass("hidden").empty().append("<p>"+e.data.message+"</p>"),t("#oauth-access").before("<p>"+e.data.url+"</p>"),t(".oauth-request").addClass("hidden"),t(".oauth-access").removeClass("hidden")):(t(".updated").addClass("hidden"),t(".error").removeClass("hidden").empty().append("<p>"+e.data+"</p>"))},error:function(t){console.log(t)}})},e.prototype.accessOauth=function(e){t.ajax({url:eventintegration.ajaxurl,type:"post",dataType:"json",data:{action:"access_oauth",verifier:e},success:function(e){e.success?(t(".error").addClass("hidden"),location.reload()):(t(".updated").addClass("hidden"),t(".error").removeClass("hidden").empty().append("<p>"+e.data+"</p>"))},error:function(t){console.log(t)}})},e.prototype.deleteOauth=function(){t.ajax({url:eventintegration.ajaxurl,type:"post",data:{action:"delete_oauth"},success:function(t){console.log(t),location.reload()},error:function(t){console.log(t)}})},e.prototype.handleEvents=function(){t("#oauth-request").submit(function(n){n.preventDefault();var o=t("#client-key").val(),a=t("#client-secret").val();e.prototype.requestOauth(o,a)}.bind(this)),t("#oauth-access").submit(function(n){n.preventDefault();var o=t("#verification-token").val();console.log(o),e.prototype.accessOauth(o)}.bind(this)),t("#oauth-authorized").submit(function(t){t.preventDefault(),e.prototype.deleteOauth()}.bind(this))},new e}(jQuery)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2pzL2FkbWluL2FjY2VwdC1kZW55LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9qcy9hZG1pbi9kcmF3LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvYWRtaW4vaW1wb3J0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2pzL2FkbWluL29hdXRoLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24iLCJBZG1pbiIsIkFjY2VwdERlbnkiLCIkIiwidGhpcyIsImhhbmRsZUV2ZW50cyIsImNoYW5nZUFjY2VwdGVkIiwicG9zdFN0YXR1cyIsInBvc3RJZCIsImFqYXgiLCJ1cmwiLCJldmVudGludGVncmF0aW9uIiwiYWpheHVybCIsInR5cGUiLCJkYXRhIiwiYWN0aW9uIiwiYmVmb3JlU2VuZCIsInJlc3BvbnNlIiwicG9zdEVsZW1lbnQiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImRvY3VtZW50Iiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJhdHRyIiwialF1ZXJ5IiwiRHJhd01hcCIsImRyYXdpbmdNYW5hZ2VyIiwic2F2ZWRQb2ludHMiLCJldmVudEludGVncmF0aW9uQWRtaW4iLCJvcHRpb25zIiwiYXJlYUNvb3JkaW5hdGVzIiwiZ29vZ2xlIiwibWFwcyIsInBhZ2Vub3ciLCJpbml0IiwibWFwIiwiTWFwIiwiZ2V0RWxlbWVudEJ5SWQiLCJ6b29tIiwiY2VudGVyIiwibGF0IiwibG5nIiwiZGlzYWJsZURlZmF1bHRVSSIsInpvb21Db250cm9sIiwicG9seU9wdGlvbnMiLCJzdHJva2VXZWlnaHQiLCJmaWxsT3BhY2l0eSIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwicGF0aHMiLCJQb2x5Z29uIiwiYm91bmRzIiwiTGF0TG5nQm91bmRzIiwibGVuZ3RoIiwiZXh0ZW5kIiwiZml0Qm91bmRzIiwiZHJhd2luZyIsIkRyYXdpbmdNYW5hZ2VyIiwiZHJhd2luZ01vZGUiLCJPdmVybGF5VHlwZSIsIlBPTFlHT04iLCJkcmF3aW5nQ29udHJvbCIsImRyYXdpbmdDb250cm9sT3B0aW9ucyIsInBvc2l0aW9uIiwiQ29udHJvbFBvc2l0aW9uIiwiVE9QX0NFTlRFUiIsImRyYXdpbmdNb2RlcyIsInBvbHlnb25PcHRpb25zIiwic2V0TWFwIiwiYWRkTGlzdGVuZXIiLCJwb2x5Z29uQ29tcGxldGUiLCJvdmVybGF5IiwidmVydGljZXMiLCJnZXRQYXRoIiwiY29vcmRzIiwiY2xlYXJNYXAiLCJhZnRlciIsImRyYXdEaXYiLCJkZWxheSIsImZhZGVPdXQiLCJ4eSIsImdldEF0IiwicHVzaCIsInNhdmVEcmF3T3B0aW9ucyIsIk1BUktFUiIsInNldERyYXdpbmdNb2RlIiwic2V0T3B0aW9ucyIsImNvb3JkaW5hdGVzIiwiZGF0YVR5cGUiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJhZGRFdmVudExpc3RlbmVyIiwibG9hZGluZyIsInRpbWVySWQiLCJyZWFkeSIsImNsaWNrIiwibG9hZGluZ09jY2FzaW9ucyIsImJ1dHRvbiIsInN0b3JlZENzcyIsImJnQ29sb3IiLCJjc3MiLCJ0ZXh0Q29sb3IiLCJib3JkZXJDb2xvciIsInRleHRTaGFkb3ciLCJib3hTaGFkb3ciLCJ3aWR0aCIsInRleHQiLCJjb2xsZWN0Q3NzRnJvbUJ1dHRvbiIsImNhbGxiYWNrIiwidGV4dHMiLCJodG1sIiwiZmFkZUluIiwiY291bnRlciIsInNldEludGVydmFsIiwidW5kZWZpbmVkIiwicmVkTG9hZGluZ0J1dHRvbiIsInBvc3QiLCJjbGVhclRpbWVvdXQiLCJyZXN0b3JlQnV0dG9uIiwibG9jYXRpb24iLCJyZWxvYWQiLCJPYXV0aCIsInJlcXVlc3RPYXV0aCIsImNsaWVudCIsInNlY3JldCIsInN1Y2Nlc3MiLCJlbXB0eSIsImFwcGVuZCIsIm1lc3NhZ2UiLCJiZWZvcmUiLCJhY2Nlc3NPYXV0aCIsInZlcmlmaWVyIiwiZGVsZXRlT2F1dGgiLCJzdWJtaXQiLCJ2YWwiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVB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NzE1MjUwMDBhNzVlYTFjOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMDcpO1xuIiwiZXhwb3J0IGRlZmF1bHQgKCgpID0+IHtcbiAgICB2YXIgRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24gPSBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbiB8fCB7fTtcbiAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5BZG1pbiA9IEV2ZW50TWFuYWdlckludGVncmF0aW9uLkFkbWluIHx8IHt9O1xuXG4gICAgRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24uQWRtaW4uQWNjZXB0RGVueSA9IChmdW5jdGlvbiAoJCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIEFjY2VwdERlbnkoKSB7XG4gICAgICAgICAgICAkKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudHMoKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQWNjZXB0IG9yIGRlbnkgZXZlbnRzLlxuICAgICAgICAgKiBAcGFyYW0gIGludCBwb3N0U3RhdHVzIDEgPSBhY2NlcHQsIDAgPSBkZW55XG4gICAgICAgICAqIEBwYXJhbSAgaW50IHBvc3RJZCAgICAgZXZlbnQgb2JqZWN0IGlkXG4gICAgICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICAgICAqL1xuICAgICAgICBBY2NlcHREZW55LnByb3RvdHlwZS5jaGFuZ2VBY2NlcHRlZCA9IGZ1bmN0aW9uKHBvc3RTdGF0dXMsIHBvc3RJZCkge1xuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBldmVudGludGVncmF0aW9uLmFqYXh1cmwsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uICAgIDogJ2FjY2VwdF9vcl9kZW55JyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgIDogcG9zdFN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgcG9zdElkICAgIDogcG9zdElkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdEVsZW1lbnQgPSAkKCcjcG9zdC0nICsgcG9zdElkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RTdGF0dXMgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdEVsZW1lbnQuZmluZCgnLmRlbnknKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0RWxlbWVudC5maW5kKCcuYWNjZXB0JykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYocG9zdFN0YXR1cyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0RWxlbWVudC5maW5kKCcuZGVueScpLmFkZENsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RFbGVtZW50LmZpbmQoJy5hY2NlcHQnKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlIGV2ZW50c1xuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgQWNjZXB0RGVueS5wcm90b3R5cGUuaGFuZGxlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJy5hY2NlcHQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9zdElkID0gJChlLnRhcmdldCkuYXR0cigncG9zdGlkJyk7XG4gICAgICAgICAgICAgICAgQWNjZXB0RGVueS5wcm90b3R5cGUuY2hhbmdlQWNjZXB0ZWQoMSwgcG9zdElkKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcuZGVueScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHZhciBwb3N0SWQgPSAkKGUudGFyZ2V0KS5hdHRyKCdwb3N0aWQnKTtcbiAgICAgICAgICAgICAgICBBY2NlcHREZW55LnByb3RvdHlwZS5jaGFuZ2VBY2NlcHRlZCgwLCBwb3N0SWQpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IEFjY2VwdERlbnkoKTtcblxuICAgIH0pKGpRdWVyeSk7XG5cbn0pKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xuICAgIHZhciBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbiA9IEV2ZW50TWFuYWdlckludGVncmF0aW9uIHx8IHt9O1xuICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLkFkbWluID0gRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24uQWRtaW4gfHwge307XG5cbiAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5BZG1pbi5EcmF3TWFwID0gKGZ1bmN0aW9uICgkKSB7XG5cbiAgICAgICAgICAgIHZhciBkcmF3aW5nTWFuYWdlcixcbiAgICAgICAgICAgICAgICBkcmF3blBvbHlnb24sXG4gICAgICAgICAgICAgICAgc2F2ZWRQb2ludHMgPSBldmVudEludGVncmF0aW9uQWRtaW4ub3B0aW9ucy5hcmVhQ29vcmRpbmF0ZXM7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIERyYXdNYXAoKSB7XG4gICAgICAgICAgICAgICAgJChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ29vZ2xlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZ29vZ2xlLm1hcHMgPT09ICdvYmplY3QnICYmIHBhZ2Vub3cgPT09ICdldmVudF9wYWdlX2V2ZW50LW9wdGlvbnMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBEcmF3TWFwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkcmF3LW1hcC1hcmVhJyksIHtcbiAgICAgICAgICAgICAgICAgICAgem9vbTogMTMsXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge2xhdDogNTYuMDQ2NzMsIGxuZzogMTIuNjk0Mzd9LFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB6b29tQ29udHJvbDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBvbHlPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBzdHJva2VXZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjQ1LFxuICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjMWU5MGZmJyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6ICcjMDQ4MEZGJ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2F2ZWRQb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9seU9wdGlvbnMucGF0aHMgPSBzYXZlZFBvaW50cztcbiAgICAgICAgICAgICAgICAgICAgZHJhd2luZ01hbmFnZXIgPSBuZXcgZ29vZ2xlLm1hcHMuUG9seWdvbihwb2x5T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBjZW50ZXIgb2YgdGhlIG1hcFxuICAgICAgICAgICAgICAgICAgICB2YXIgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNhdmVkUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZHMuZXh0ZW5kKHNhdmVkUG9pbnRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXAuZml0Qm91bmRzKGJvdW5kcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd2luZ01hbmFnZXIgPSBuZXcgZ29vZ2xlLm1hcHMuZHJhd2luZy5EcmF3aW5nTWFuYWdlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3aW5nTW9kZTogZ29vZ2xlLm1hcHMuZHJhd2luZy5PdmVybGF5VHlwZS5QT0xZR09OLFxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd2luZ0NvbnRyb2w6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3aW5nQ29udHJvbE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLlRPUF9DRU5URVIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd2luZ01vZGVzOiBbJ3BvbHlnb24nXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25PcHRpb25zOiBwb2x5T3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkcmF3aW5nTWFuYWdlci5zZXRNYXAobWFwKTtcblxuICAgICAgICAgICAgICAgIC8vIEZpcmUgYWN0aW9uIHdoZW4gcG9seWdvbiBzaGFwZSBpcyBjb21wbGV0ZWRcbiAgICAgICAgICAgICAgICBkcmF3aW5nTWFuYWdlci5hZGRMaXN0ZW5lcignb3ZlcmxheWNvbXBsZXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2x5Z29uQ29tcGxldGUoZSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIERyYXdNYXAucHJvdG90eXBlLnBvbHlnb25Db21wbGV0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZHJhd25Qb2x5Z29uID0gZS5vdmVybGF5O1xuICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IGUub3ZlcmxheS5nZXRQYXRoKCksXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gTWF4aW11bSBhbW91bnQgb2YgcG9pbnRzIGlzIDhcbiAgICAgICAgICAgICAgICBpZiAodmVydGljZXMubGVuZ3RoID4gOCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNjbGVhci1kcmF3LW1hcCcpLmFmdGVyKCc8ZGl2IGNsYXNzPVwibm90aWNlIGVycm9yXCI+PHA+RXhjZWVkZWQgbWF4aW11bSBhbW91bnQgb2YgOCBwb2ludHMuIFBsZWFzZSB0cnkgYWdhaW4uPC9wPjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICAkKCcubm90aWNlJywgZHJhd0RpdikuZGVsYXkoMzAwMCkuZmFkZU91dCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeHkgPSB2ZXJ0aWNlcy5nZXRBdChpKTtcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzLnB1c2goe2xhdDogeHkubGF0KCksIGxuZzogeHkubG5nKCl9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRvIGRiXG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlRHJhd09wdGlvbnMoY29vcmRzKTtcblxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgIT0gZ29vZ2xlLm1hcHMuZHJhd2luZy5PdmVybGF5VHlwZS5NQVJLRVIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3dpdGNoIGJhY2sgdG8gbm9uLWRyYXdpbmcgbW9kZSBhZnRlciBkcmF3aW5nIGEgc2hhcGUuXG4gICAgICAgICAgICAgICAgICAgIGRyYXdpbmdNYW5hZ2VyLnNldERyYXdpbmdNb2RlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAvLyBIaWRlIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgICAgIGRyYXdpbmdNYW5hZ2VyLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd2luZ0NvbnRyb2w6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIERyYXdNYXAucHJvdG90eXBlLnNhdmVEcmF3T3B0aW9ucyA9IGZ1bmN0aW9uIChjb29yZGluYXRlcykge1xuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogZXZlbnRpbnRlZ3JhdGlvbi5hamF4dXJsLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ3NhdmVfZHJhd19wb2ludHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVtb3ZlcyB0aGUgZHJhd24gcG9seWdvbiBhcmVhXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERyYXdNYXAucHJvdG90eXBlLmNsZWFyTWFwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNhdmVkUG9pbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIERyYXdNYXAucHJvdG90eXBlLmhhbmRsZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXItZHJhdy1tYXAnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhck1hcCgpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IERyYXdNYXAoKTtcbiAgICAgICAgfVxuICAgICkoalF1ZXJ5KTtcblxufSkoKTsiLCJleHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xuICAgIHZhciBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbiA9IEV2ZW50TWFuYWdlckludGVncmF0aW9uIHx8IHt9O1xuICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLmxvYWRpbmcgPSBmYWxzZTtcbiAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5kYXRhID0geydhY3Rpb24nIDogJ2ltcG9ydF9ldmVudHMnLCAndmFsdWUnOiAnJ307XG4gICAgRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24udGltZXJJZCA9IG51bGw7XG5cbiAgICBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XG4gICAgICAgICQoJyNpbXBvcnRldmVudHMnKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmKCFFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5sb2FkaW5nT2NjYXNpb25zKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLmxvYWRpbmdPY2Nhc2lvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgIHZhciBzdG9yZWRDc3MgPSBjb2xsZWN0Q3NzRnJvbUJ1dHRvbihidXR0b24pO1xuICAgICAgICAgICAgICAgIHJlZExvYWRpbmdCdXR0b24oYnV0dG9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24uZGF0YS52YWx1ZSA9IGJ1dHRvbi5hdHRyKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICBqUXVlcnkucG9zdChhamF4dXJsLCBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5kYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1Bvc3RzID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5sb2FkaW5nT2NjYXNpb25zID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlQnV0dG9uKGJ1dHRvbiwgc3RvcmVkQ3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjb2xsZWN0Q3NzRnJvbUJ1dHRvbihidXR0b24pXG4gICAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmdDb2xvcjogYnV0dG9uLmNzcygnYmFja2dyb3VuZC1jb2xvcicpLFxuICAgICAgICAgICAgdGV4dENvbG9yOiBidXR0b24uY3NzKCdjb2xvcicpLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJ1dHRvbi5jc3MoJ2JvcmRlci1jb2xvcicpLFxuICAgICAgICAgICAgdGV4dFNoYWRvdzogYnV0dG9uLmNzcygndGV4dC1zaGFkb3cnKSxcbiAgICAgICAgICAgIGJveFNoYWRvdzogYnV0dG9uLmNzcygnYm94LXNoYWRvdycpLFxuICAgICAgICAgICAgd2lkdGg6IGJ1dHRvbi5jc3MoJ3dpZHRoJyksXG4gICAgICAgICAgICB0ZXh0OiBidXR0b24udGV4dCgpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVkTG9hZGluZ0J1dHRvbihidXR0b24sIGNhbGxiYWNrKVxuICAgIHtcbiAgICAgICAgYnV0dG9uLmZhZGVPdXQoNTAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0cyA9IFtldmVudEludGVncmF0aW9uQWRtaW4ubG9hZGluZyArICcmbmJzcDsmbmJzcDsmbmJzcDsnLCBldmVudEludGVncmF0aW9uQWRtaW4ubG9hZGluZyArICcuJm5ic3A7Jm5ic3A7JywgZXZlbnRJbnRlZ3JhdGlvbkFkbWluLmxvYWRpbmcgKyAnLi4mbmJzcDsnLCBldmVudEludGVncmF0aW9uQWRtaW4ubG9hZGluZyArICcuLi4nXTtcbiAgICAgICAgICAgIGJ1dHRvbi5jc3MoJ2JhY2tncm91bmQtY29sb3InLCAncmdiKDUxLCAxOTcsIDI1NSknKTtcbiAgICAgICAgICAgIGJ1dHRvbi5jc3MoJ2JvcmRlci1jb2xvcicsICdyZ2IoMCwgMTY0LCAyMzApJyk7XG4gICAgICAgICAgICBidXR0b24uY3NzKCdjb2xvcicsICd3aGl0ZScpO1xuICAgICAgICAgICAgYnV0dG9uLmNzcygndGV4dC1zaGFkb3cnLCAnMCAtMXB4IDFweCByZ2IoMCwgMTY0LCAyMzApLDFweCAwIDFweCByZ2IoMCwgMTY0LCAyMzApLDAgMXB4IDFweCByZ2IoMCwgMTY0LCAyMzApLC0xcHggMCAxcHggcmdiKDAsIDE2NCwgMjMwKScpO1xuICAgICAgICAgICAgYnV0dG9uLmNzcygnYm94LXNoYWRvdycsICdub25lJyk7XG4gICAgICAgICAgICBidXR0b24uY3NzKCd3aWR0aCcsICc4NXB4Jyk7XG4gICAgICAgICAgICBidXR0b24uaHRtbCh0ZXh0c1swXSk7XG4gICAgICAgICAgICBidXR0b24uZmFkZUluKDUwMCk7XG5cbiAgICAgICAgICAgIHZhciBjb3VudGVyID0gMTtcbiAgICAgICAgICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLnRpbWVySWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYoY291bnRlciA+IDMpXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5odG1sKHRleHRzW2NvdW50ZXJdKTtcbiAgICAgICAgICAgICAgICArK2NvdW50ZXI7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgaWYoY2FsbGJhY2sgIT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc3RvcmVCdXR0b24oYnV0dG9uLCBzdG9yZWRDc3MpXG4gICAge1xuICAgICAgICBidXR0b24uZmFkZU91dCg1MDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYnV0dG9uLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIHN0b3JlZENzcy5iZ0NvbG9yKTtcbiAgICAgICAgICAgIGJ1dHRvbi5jc3MoJ2NvbG9yJywgc3RvcmVkQ3NzLnRleHRDb2xvcik7XG4gICAgICAgICAgICBidXR0b24uY3NzKCdib3JkZXItY29sb3InLCBzdG9yZWRDc3MuYm9yZGVyQ29sb3IpO1xuICAgICAgICAgICAgYnV0dG9uLmNzcygndGV4dC1zaGFkb3cnLCBzdG9yZWRDc3MudGV4dFNoYWRvdyk7XG4gICAgICAgICAgICBidXR0b24uY3NzKCdib3gtc2hhZG93Jywgc3RvcmVkQ3NzLmJveFNoYWRvdyk7XG4gICAgICAgICAgICBidXR0b24uY3NzKCd3aWR0aCcsIHN0b3JlZENzcy53aWR0aCk7XG4gICAgICAgICAgICBidXR0b24udGV4dChzdG9yZWRDc3MudGV4dCk7XG4gICAgICAgICAgICBidXR0b24uZmFkZUluKDUwMCk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24udGltZXJJZCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufSkoKTsiLCJleHBvcnQgZGVmYXVsdCAoKCkgPT4ge1xuICAgIHZhciBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbiA9IEV2ZW50TWFuYWdlckludGVncmF0aW9uIHx8IHt9O1xuICAgIEV2ZW50TWFuYWdlckludGVncmF0aW9uLkFkbWluID0gRXZlbnRNYW5hZ2VySW50ZWdyYXRpb24uQWRtaW4gfHwge307XG5cbiAgICBFdmVudE1hbmFnZXJJbnRlZ3JhdGlvbi5BZG1pbi5PYXV0aCA9IChmdW5jdGlvbiAoJCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIE9hdXRoKCkge1xuICAgICAgICAgICAgJChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQoJy5vYXV0aC1hY2Nlc3MnKS5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFdmVudHMoKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBPYXV0aC5wcm90b3R5cGUucmVxdWVzdE9hdXRoID0gZnVuY3Rpb24oY2xpZW50LCBzZWNyZXQpIHtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBldmVudGludGVncmF0aW9uLmFqYXh1cmwsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb24gIDogJ3JlcXVlc3Rfb2F1dGgnLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnQgIDogY2xpZW50LFxuICAgICAgICAgICAgICAgICAgICBzZWNyZXQgIDogc2VjcmV0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5lcnJvclwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIudXBkYXRlZFwiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKS5lbXB0eSgpLmFwcGVuZCgnPHA+JyArIHJlc3BvbnNlLmRhdGEubWVzc2FnZSArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI29hdXRoLWFjY2Vzc1wiKS5iZWZvcmUoJzxwPicgKyByZXNwb25zZS5kYXRhLnVybCArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLm9hdXRoLXJlcXVlc3RcIikuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLm9hdXRoLWFjY2Vzc1wiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIudXBkYXRlZFwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIuZXJyb3JcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIikuZW1wdHkoKS5hcHBlbmQoJzxwPicrcmVzcG9uc2UuZGF0YSsnPC9wPicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBPYXV0aC5wcm90b3R5cGUuYWNjZXNzT2F1dGggPSBmdW5jdGlvbih2ZXJpZmllcikge1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IGV2ZW50aW50ZWdyYXRpb24uYWpheHVybCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiAgICAgIDogJ2FjY2Vzc19vYXV0aCcsXG4gICAgICAgICAgICAgICAgICAgIHZlcmlmaWVyICAgIDogdmVyaWZpZXJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmVycm9yXCIpLmFkZENsYXNzKFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLnVwZGF0ZWRcIikuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiLmVycm9yXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpLmVtcHR5KCkuYXBwZW5kKCc8cD4nK3Jlc3BvbnNlLmRhdGErJzwvcD4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgT2F1dGgucHJvdG90eXBlLmRlbGV0ZU9hdXRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogZXZlbnRpbnRlZ3JhdGlvbi5hamF4dXJsLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA6ICdkZWxldGVfb2F1dGgnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZSBldmVudHNcbiAgICAgICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgICAgICovXG4gICAgICAgIE9hdXRoLnByb3RvdHlwZS5oYW5kbGVFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKFwiI29hdXRoLXJlcXVlc3RcIikuc3VibWl0KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudCA9ICQoXCIjY2xpZW50LWtleVwiKS52YWwoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VjcmV0ID0gJChcIiNjbGllbnQtc2VjcmV0XCIpLnZhbCgpO1xuICAgICAgICAgICAgICAgIE9hdXRoLnByb3RvdHlwZS5yZXF1ZXN0T2F1dGgoY2xpZW50LCBzZWNyZXQpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgJChcIiNvYXV0aC1hY2Nlc3NcIikuc3VibWl0KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdmFyIHZlcmlmaWVyID0gJChcIiN2ZXJpZmljYXRpb24tdG9rZW5cIikudmFsKCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmVyaWZpZXIpO1xuICAgICAgICAgICAgICAgIE9hdXRoLnByb3RvdHlwZS5hY2Nlc3NPYXV0aCh2ZXJpZmllcik7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAkKFwiI29hdXRoLWF1dGhvcml6ZWRcIikuc3VibWl0KGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgT2F1dGgucHJvdG90eXBlLmRlbGV0ZU9hdXRoKCk7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5ldyBPYXV0aCgpO1xuXG4gICAgfSkoalF1ZXJ5KTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=event-integration-admin.762771525000a75ea1c8.js.map